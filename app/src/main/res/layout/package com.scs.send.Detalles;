package com.scs.send.Detalles;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.scs.send.Detalles.PostI;
import com.scs.send.R;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;


public class PostIem extends ArrayAdapter {

    private static final String URL_BASE = "http://192.168.43.182/ServerSend/Welcome/Productos/";
    private static final String URL_IMG = "http://192.168.43.182/ServerSend/assets/Productos/";
    private static final String TAG = "PostRestaAdapter";
    JsonObjectRequest jsArrayRequest;

    ArrayList<PostI> items;
    ArrayList<PostI> item2;
    List<Categoria>categoria;
    Context context;
    LayoutInflater layoutInflater;
    CustomFilter filtro;
    ArrayList<PostI> filtroitems;
    String id=null;
    String a="";

    // Atributos
    private RequestQueue requestQueue;

    public PostIem(Context context,String texto) {
        super(context, 0);

        // Crear nueva cola de peticiones
        requestQueue = Volley.newRequestQueue(context);

        // Nueva petición JSONObject

        jsArrayRequest = new JsonObjectRequest(Request.Method.GET,URL_BASE+texto,(String) null,new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                items = (ArrayList<PostI>) parseJson(response);
                notifyDataSetChanged();
            }
        },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.d(TAG, "Error Respuesta en JSON: " + error.getMessage());

                    }
                }
        );

        // Añadir petición a la cola
        requestQueue.add(jsArrayRequest);
    }

    @Override
    public int getCount() {
        return items != null ? items.size() : 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());

        // Referencia del view procesado
        View listItemView;

        //Comprobando si el View no existe
        listItemView = null == convertView ? layoutInflater.inflate(
                R.layout.productositem,
                parent,
                false) : convertView;


        // Obtener el item actual
        PostI item = items.get(position);

        // Obtener Views
        TextView textoTitulo = (TextView) listItemView.
                findViewById(R.id.textoTitulo);
        TextView textoDescripcion = (TextView) listItemView.
                findViewById(R.id.Descripcion);

        TextView idlocal=(TextView) listItemView.findViewById(R.id.idProducto);
        idlocal.setText(""+item.getId());
        listItemView.findViewById(R.id.idProducto).setVisibility(View.GONE);

        final ImageView imagenPost = (ImageView) listItemView.
                findViewById(R.id.imagenPost);

        // Actualizar los Views
        textoTitulo.setText(item.getTitulo());
        textoDescripcion.setText(item.getDescripcion());

        // Petición para obtener la imagen
        ImageRequest request = new ImageRequest(
                URL_IMG + item.getImagen(),
                new Response.Listener<Bitmap>() {
                    @Override
                    public void onResponse(Bitmap bitmap) {
                        imagenPost.setImageBitmap(bitmap);
                    }
                }, 0, 0, null, null,
                new Response.ErrorListener() {
                    public void onErrorResponse(VolleyError error) {
                        imagenPost.setImageResource(R.drawable.logoapp);
                        Log.d(TAG, "Error en respuesta Bitmap: " + error.getMessage());
                    }
                });

        // Añadir petición a la cola
        requestQueue.add(request);

        this.filtroitems = items;
        return listItemView;
    }

    public List<PostI> parseJson(JSONObject jsonObject) {
        // Variables locales
        List<PostI> posts = new ArrayList<>();
        JSONArray jsonArray = null;

        try {
            // Obtener el array del objeto
            jsonArray = jsonObject.getJSONArray("items");

            for (int i = 0; i < jsonArray.length(); i++) {

                try {
                    JSONObject objeto = jsonArray.getJSONObject(i);

                    PostI post = new PostI(
                            objeto.getString("node_title"),
                            objeto.getString("Descripcion"),
                            objeto.getString("Foto"),
                            objeto.getString("Categoria"),
                            objeto.getInt("id"));


                    posts.add(post);

                } catch (JSONException e) {
                    Log.e(TAG, "Error de parsing: " + e.getMessage());
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

 item2= (ArrayList<PostI>) posts;
        return posts;
    }
    public Filter getFilter() {
        if(filtro == null){
            filtro = new CustomFilter();
        }

        return filtro;
    }
    class CustomFilter extends Filter{

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            FilterResults resulst = new FilterResults();

            if(constraint != null && constraint.length()>0){
                //pasamos a mayusculas
                constraint = constraint.toString().toUpperCase();

                ArrayList<PostI> filtro = new ArrayList<PostI>();

                for(Integer i=0;i<filtroitems.size();i++){
                    if(filtroitems.get(i).getTitulo().toUpperCase().contains(constraint)){
                        PostI d= new PostI(filtroitems.get(i).getTitulo(),filtroitems.get(i).getDescripcion(),filtroitems.get(i).getImagen(),filtroitems.get(i).getCategoria(),filtroitems.get(i).getId());

                        filtro.add(d);
                    }
                }
                resulst.count= filtro.size();
                resulst.values = filtro;
            }else{
                Log.d(TAG, "Eaaaaaaa "+item2);
                resulst.count= item2.size();
                resulst.values = item2;
            }

            return resulst;
        }

        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            items = (ArrayList<PostI>) results.values;
            notifyDataSetChanged();


        }
    }
}
